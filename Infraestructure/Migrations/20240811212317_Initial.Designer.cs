// <auto-generated />
using System;
using Infraestructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(TechChallengeContext))]
    [Migration("20240811212317_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Contact.Entity.ContactEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Contact");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39b557cf-682e-4437-8c4b-db19ee52f25d"),
                            Active = true,
                            CellphoneNumber = "123456789",
                            CreationDate = new DateTime(2024, 8, 11, 18, 23, 16, 157, DateTimeKind.Utc).AddTicks(7249),
                            Email = "joaosilva@example.com",
                            Name = "João Silva",
                            RegionId = new Guid("efe16b65-feca-402a-8e21-2d1843f0d313")
                        },
                        new
                        {
                            Id = new Guid("d9f37035-4479-4dba-a3b6-f5c918e21736"),
                            Active = true,
                            CellphoneNumber = "123456789",
                            CreationDate = new DateTime(2024, 8, 11, 18, 23, 16, 157, DateTimeKind.Utc).AddTicks(7274),
                            Email = "mariaoliveira@example.com",
                            Name = "Maria Oliveira",
                            RegionId = new Guid("cefa4129-b1d8-4eb5-b278-86d86d8763c2")
                        },
                        new
                        {
                            Id = new Guid("18887b4a-437d-4c62-949c-00c4a890e35a"),
                            Active = true,
                            CellphoneNumber = "123456789",
                            CreationDate = new DateTime(2024, 8, 11, 18, 23, 16, 157, DateTimeKind.Utc).AddTicks(7283),
                            Email = "carlospereira@example.com",
                            Name = "Carlos Pereira",
                            RegionId = new Guid("01378b5d-fdc4-4435-b595-6cfad33ef4a6")
                        });
                });

            modelBuilder.Entity("Domain.Region.Entity.RegionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efe16b65-feca-402a-8e21-2d1843f0d313"),
                            Active = true,
                            CreationDate = new DateTime(2024, 8, 11, 18, 23, 16, 158, DateTimeKind.Utc).AddTicks(293),
                            DDD = "13",
                            Description = "Baixada Santista"
                        },
                        new
                        {
                            Id = new Guid("cefa4129-b1d8-4eb5-b278-86d86d8763c2"),
                            Active = true,
                            CreationDate = new DateTime(2024, 8, 11, 18, 23, 16, 158, DateTimeKind.Utc).AddTicks(323),
                            DDD = "11",
                            Description = "São Paulo"
                        },
                        new
                        {
                            Id = new Guid("01378b5d-fdc4-4435-b595-6cfad33ef4a6"),
                            Active = true,
                            CreationDate = new DateTime(2024, 8, 11, 18, 23, 16, 158, DateTimeKind.Utc).AddTicks(448),
                            DDD = "21",
                            Description = "Rio de Janeiro"
                        });
                });

            modelBuilder.Entity("Domain.Contact.Entity.ContactEntity", b =>
                {
                    b.HasOne("Domain.Region.Entity.RegionEntity", "Region")
                        .WithMany("Contacts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Region.Entity.RegionEntity", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
